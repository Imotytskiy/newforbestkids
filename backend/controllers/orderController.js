import orderModel from "../models/orderModel.js";
import userModel from "../models/userModel.js";

// üõí COD (–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ)
const placeOrder = async (req, res) => {
  try {
    const { userId, items, amount, address } = req.body;

    if (!userId || !items || !amount || !address) {
      return res
        .status(400)
        .json({ success: false, message: "–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
    }

    const orderData = {
      userId,
      items,
      address,
      amount,
      paymentMethod: "COD",
      payment: false,
      status: "Order Placed", // ‚úÖ –î–æ–¥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
      date: Date.now(),
    };

    const newOrder = new orderModel(orderData);
    await newOrder.save();

    // ‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ –ø—ñ—Å–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ cartData ‚Äî –º–∞—Å–∏–≤!)
    await userModel.findByIdAndUpdate(userId, { cartData: [] });

    res.json({ success: true, message: "Order Placed" });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
    res
      .status(500)
      .json({ success: false, message: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üí≥ –ü–ª–∞—Ç—ñ–∂ —á–µ—Ä–µ–∑ Stripe (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
const placeOrderStripe = async (req, res) => {
  try {
    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ Stripe
    res.json({ success: true, message: "Stripe Payment Placeholder" });
  } catch (error) {
    console.error("Stripe –ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ Stripe" });
  }
};

// üì¶ –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
const allOrders = async (req, res) => {
  try {
    const orders = await orderModel.find({}).populate("userId", "name email");
    res.json({ success: true, orders });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:", error);
    res.status(500).json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üë§ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const userOrders = async (req, res) => {
  try {
    const { userId } = req.body;
    if (!userId) {
      return res
        .status(400)
        .json({ success: false, message: "userId –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π" });
    }

    const orders = await orderModel.find({ userId });
    res.json({ success: true, orders });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    res.status(500).json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const updateStatus = async (req, res) => {
  try {
    const { orderId, status } = req.body;

    if (!orderId || !status) {
      return res
        .status(400)
        .json({ success: false, message: "orderId —Ç–∞ status –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ" });
    }

    const updatedOrder = await orderModel.findByIdAndUpdate(
      orderId,
      { status },
      { new: true }
    );

    if (!updatedOrder) {
      return res
        .status(404)
        .json({ success: false, message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    res.json({ success: true, message: "Status Updated", updatedOrder });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É:", error);
    res.status(500).json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

export { placeOrder, placeOrderStripe, allOrders, userOrders, updateStatus };
